"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING, TypedDict
from speech_recognition.audio import AudioData
from google.cloud.speech import RecognitionConfig, RecognizeResponse, SpeechContext
from typing_extensions import Required

if TYPE_CHECKING:
    ...
class GoogleCloudRecognizerParameters(TypedDict, total=False):
    """Optional parameters.

    The recognition language is determined by ``language_code``, which is a BCP-47 language tag like ``"en-US"`` (US English). Default: ``"en-US"``.
    A list of supported language tags can be found in the `Speech-to-Text supported languages <https://cloud.google.com/speech/docs/languages>`__.

    If ``preferred_phrases`` is an iterable of phrase strings, those given phrases will be more likely to be recognized over similar-sounding alternatives.
    This is useful for things like keyword/command recognition or adding new phrases that aren't in Google's vocabulary.
    Note that the API imposes certain `restrictions on the list of phrase strings <https://cloud.google.com/speech/limits#content>`__.

    ``show_all``: See :py:func:`recognize`.

    ``model``: You can select the model to get best results. (See `RecognitionConfig's documentation <https://cloud.google.com/python/docs/reference/speech/latest/google.cloud.speech_v1.types.RecognitionConfig>`__ for detail)

    ``use_enhanced``: Set to true to use an enhanced model for speech recognition.
    """
    preferred_phrases: list[str]
    show_all: bool
    language_code: str
    model: str
    use_enhanced: bool
    ...


class GoogleCloudSpeechV1Parameters(TypedDict, total=False):
    """Speech-to-Text V1 API's parameters.

    https://cloud.google.com/python/docs/reference/speech/latest/google.cloud.speech_v1.types.RecognitionConfig
    """
    encoding: Required[RecognitionConfig.AudioEncoding]
    sample_rate_hertz: Required[int]
    language_code: Required[str]
    speech_contexts: list[SpeechContext]
    enable_word_time_offsets: bool
    model: str
    use_enhanced: bool
    ...


def recognize(recognizer, audio_data: AudioData, credentials_json_path: str | None = ..., **kwargs: GoogleCloudRecognizerParameters) -> str | RecognizeResponse:
    """Performs speech recognition on ``audio_data`` (an ``AudioData`` instance), using the Google Cloud Speech-to-Text V1 API.

    This function requires a Google Cloud Platform account; see the `Set up Speech-to-Text <https://cloud.google.com/speech-to-text/docs/before-you-begin>`__ for details and instructions. Basically, create a project, enable billing for the project, enable the Google Cloud Speech API for the project.
    And create local authentication credentials for your user account. The result is a JSON file containing the API credentials. You can specify the JSON file by ``credentials_json_path``. If not specified, the library will try to automatically `find the default API credentials JSON file <https://developers.google.com/identity/protocols/application-default-credentials>`__.

    Returns the most likely transcription if ``show_all`` is False (the default). Otherwise, returns the raw API response as a JSON dictionary.
    For other parameters, see :py:class:`GoogleCloudRecognizerParameters`.

    Raises a ``speech_recognition.UnknownValueError`` exception if the speech is unintelligible. Raises a ``speech_recognition.RequestError`` exception if the speech recognition operation failed, if the credentials aren't valid, or if there is no Internet connection.
    """
    ...